{"name":"Johnny Cache","tagline":"A thread-safe caching abstraction layer for .NET","body":"# Johnny Cache\r\n[![Build Status](https://travis-ci.org/pimbrouwers/johnny-cache.svg?branch=master)](https://travis-ci.org/pimbrouwers/johnny-cache/)\r\n\r\nA thread-safe caching abstraction for .NET -- leverages object cache, filesystem and Azure Blob Storage (Amazon S3 coming soon). Johnny Cache was designed to improve application performance in both single-server and web-farm systems.\r\n\r\n## Setup/Configuration\r\nThere are 3 primary configuration variables that need to be set in your ``App.Config/Web.Config``\r\n```xml\r\n<!-- JOHNNY CACHE -->\r\n<add key=\"JC-ObjectCacheName\" value=\"JohnnyCache-SomeProject\"/>\r\n<add key=\"JC-WorkingDirectory\" value=\"c:\\temp\\JohnnyCache\\SomeProject\"/>\r\n<add key=\"JC-ExpirationInSeconds\" value=\"300\"/>\r\n```\r\nNote: None of the above configuration variables are required, as they all are backed by default return values;\r\n\r\n## Azure Configuration\r\nTo leverage Azure Blob Storage add the following keys to your ``App.Config/Web.Config``\r\n```xml\r\n<add key=\"JC-AzureAccountName\" value=\"{{YOUR ACCOUNT NAME}}\"/>\r\n<add key=\"JC-AzureAccountKey\" value=\"{{YOUR ACCOUNT KEY}}\"/>\r\n```\r\n\r\n## Amazon S3 Configuration\r\n```c#\r\n    throw new NotImplementedException(\"Coming Soon!\");\r\n```\r\n\r\n## Usage\r\nThe API for Johnny Cache is very simple, containing only 3 methods: ``Get()`` ``Set()`` ``Delete()``.\r\n### Get\r\nThe ``Get()`` method will:\r\n- Check Object Cache\r\n- Check the File Dependancy\r\n- Check External Providers (if configured, see above)\r\n\r\nThe primary method parameter here is the ``key``. For \"stale\" checks you can optionally pass a ``cacheDurationSeconds`` param to override the library-governing expiration.\r\n```c#\r\nstring cacheKey = \"SomeUniqueCacheKey\";\r\nYourCoolObject mycoolObject = JohnnyCache.Get<YourCoolObject>(cacheKey) as YourCoolObject; //using library expiration\r\nYourCoolObject mycoolObject = JohnnyCache.Get<YourCoolObject>(cacheKey, 6000) as YourCoolObject; //overriding library expiration\r\n```\r\n### Set\r\nThe ``Set()`` method will:\r\n- Write to Object Cache\r\n- Write to the File Dependancy\r\n- Upload to External Providers (if configured, see above)\r\n\r\nThe primary method parameter here is the ``key``. For \"stale\" checks you can optionally pass a ``cacheDurationSeconds`` param to override the library-governing expiration.\r\n```c#\r\nstring cacheKey = \"SomeUniqueCacheKey\";\r\nJohnnyCache.Set(myCoolObject, cacheKey); //using library expiration\r\nJohnnyCache.Set(myCoolObject, cacheKey, 6000); //overriding library expiration\r\n```\r\n### Delete\r\nThe delete method will purge the object(s) from all levels of cache. \r\n\r\nThe lone method parameter here is the ``key``.\r\n```c#\r\nstring cacheKey = \"SomeUniqueCacheKey\";\r\nJohnnyCache.Set(cacheKey);\r\n```\r\n","google":"UA-74210946-1","note":"Don't delete this file! It's used internally to help with page regeneration."}